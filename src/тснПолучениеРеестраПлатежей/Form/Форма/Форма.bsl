								   
&НаСервере
Функция СгенерироватьURLСПараметрами(ПараметрыЗапроса)

	СтрокаПараметров = "";
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		 СтрокаПараметров = СтрокаПараметров + ?(ПустаяСтрока(СтрокаПараметров), "?", "&") + 
		 	ПараметрЗапроса.Ключ + "=" + КодироватьСтроку(ПараметрЗапроса.Значение, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;  
		
	Возврат СтрокаПараметров;
	
КонецФункции

&НаСервере 
Функция FinapiGET(URL, ПараметрыЗапроса = Неопределено)

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);
	
	Соединение = Новый HTTPСоединение("fintech.sberbank.ru",9443,,,,, ЗащищенноеСоединение);
	
	СтрокаПараметров = ?(ПараметрыЗапроса = Неопределено, "", СгенерироватьURLСПараметрами(ПараметрыЗапроса));
		
	Запрос = Новый HTTPЗапрос("fintech/api/v1/" + URL + СтрокаПараметров);
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
	
	Ответ = Соединение.Получить(Запрос); 
	Если Ответ.КодСостояния <> 200 Тогда        
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ОтветСтрока);
	ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ОтветJSON;
	
КонецФункции    


&НаСервере 
Функция FinapiPOST(URL, СтруктураЗапроса)

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);
	
	Соединение = Новый HTTPСоединение("fintech.sberbank.ru",9443,,,,, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос("fintech/api/v1/" + URL);
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken); 
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	
	Запрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда        
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();

	Если ОтветСтрока = "" Тогда
		Возврат "";
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ОтветСтрока);
		ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	Возврат ОтветJSON;
	
КонецФункции    

&НаСервере
Функция FinapiDownload(URL, ИмяВыходногоФайла)
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);                           
	
	URL = Сред(URL, СтрНайти(URL, "://") + 3); // Убираем название протокола;
	ПозицияРазделителя = СтрНайти(URL, "/");
	
	СтрокаСервера = Лев(URL, ПозицияРазделителя - 1);
	ПозицияРазделителяПорта = СтрНайти(СтрокаСервера, ":");
	Если ПозицияРазделителяПорта = 0 Тогда
		АдресСервера = СтрокаСервера;
		Порт = 443;
	Иначе
		АдресСервера = Лев(СтрокаСервера, ПозицияРазделителяПорта - 1);
		Порт = Число(Сред(СтрокаСервера, ПозицияРазделителяПорта + 1));
	КонецЕсли;
	URL = Сред(URL, ПозицияРазделителя + 1);
	
	Соединение = Новый HTTPСоединение(АдресСервера,Порт,,,,, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос(URL);
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
	
	Ответ = Соединение.Получить(Запрос, ИмяВыходногоФайла);
	
	Возврат Ответ.КодСостояния = 200;
	
КонецФункции        

&НаСервере 
Процедура Пауза(Секунд) 
    
    ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
    ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
    
    Если ФоновоеЗадание = Неопределено Тогда
        ПараметрыЗадания = Новый Массив;
        ПараметрыЗадания.Добавить(Секунд);
        ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначенияБТС.Пауза", ПараметрыЗадания);
    КонецЕсли;
        
    ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
    
КонецПроцедуры

&НаСервере 
Функция СкачатьФайлыРеестра(МассивФайлов)
	
	Результат = Новый Массив();
	          
	Для Каждого ЗаписьФайла Из МассивФайлов Цикл
		
		ПараметрыЗапроса = Новый Структура("fileIds", Новый Массив());
		ПараметрыЗапроса.fileIds.Добавить(ЗаписьФайла.fileId);
		
		РезультатЗапроса = FinapiPOST("files/download", ПараметрыЗапроса);
		Если РезультатЗапроса <> Неопределено Тогда
			
			Счетчик = 0;
			Пока Счетчик < 100 Цикл
				
				Счетчик = Счетчик + 1;
				
				РезультатЗапроса = FinapiPOST("files/downloadState", ПараметрыЗапроса);
				Если РезультатЗапроса = Неопределено Тогда
					// TODO Зафиксировать ошибку - указанный файл не был найден
					Прервать;
				КонецЕсли;                                                       
				
				Файл = РезультатЗапроса[0];
				
				Если Файл.status = "PREPARING_FOR_DOWNLOAD" ИЛИ Файл.status = "UNKNOWN_STATUS" Тогда
					Пауза(1);	
					Продолжить;
				ИначеЕсли Файл.status = "READY_FOR_DOWNLOAD" Тогда
					
					Если FinapiDownload(Файл.url, ПапкаДляСохранения + "\" + ЗаписьФайла.fileName) Тогда
						Результат.Добавить(ПапкаДляСохранения + "\" + ЗаписьФайла.fileName);
						Прервать
					Иначе
						// TODO Зафиксировать ошибку - указанный файл не был скачан
						Прервать;
					КонецЕсли;
				Иначе
					// TODO Зафиксировать ошибку - указанный файл не был найден
					Прервать;
				КонецЕсли;
				
			КонецЦикла;         
			
		КонецЕсли;

	КонецЦикла;                          
	
	Возврат Результат;
	
КонецФункции

&НаСервере 
Функция ПолучитьРеестрПлатежей(НачалоПериода, КонецПериода)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("dateSince", Формат(НачалоПериода, "ДФ=yyyy-MM-dd"));
	ПараметрыЗапроса.Вставить("dateUntil", Формат(КонецПериода, "ДФ=yyyy-MM-dd"));
	
	СтрокаПараметров = СгенерироватьURLСПараметрами(ПараметрыЗапроса);
	Результат = Новый Массив();
	
	Счетчик = 0; // На всякий случай если вдруг зациклится что-то
	
	Пока Счетчик < 50 И НЕ ПустаяСтрока(СтрокаПараметров) Цикл 
		
		РеестрыПлатежей = FinapiGET("payments-registry" + СтрокаПараметров);
	
		
		Для Каждого РеестрПлатежей Из РеестрыПлатежей.paymentsRegistry Цикл
			
			НоваяЗапись = Новый Структура("Дата,Номер,БанковскийСчет,Статус,ИменаФайлов");
			НоваяЗапись.Дата = Дата(СтрЗаменить(РеестрПлатежей.date, "-", ""));
			НоваяЗапись.Номер = РеестрПлатежей.number;
			НоваяЗапись.БанковскийСчет = РеестрПлатежей.account;
			НоваяЗапись.Статус = РеестрПлатежей.bankStatus;

			НоваяЗапись.ИменаФайлов = СкачатьФайлыРеестра(РеестрПлатежей.bfAttachments);
			
			Результат.Добавить(НоваяЗапись);
			
		КонецЦикла;
		
		СтрокаПараметров = "";
		Для Каждого СсылкаНаДополнительнуюСтраницу Из РеестрыПлатежей._links Цикл
			Если СсылкаНаДополнительнуюСтраницу.rel = "next" Тогда
				СтрокаПараметров = СсылкаНаДополнительнуюСтраницу.href;
				Прервать;
			КонецЕсли;
		КонецЦикла;           
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРеестр(Команда)
	
	Результат = ПолучитьРеестрПлатежей('20220901', '20220901');
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// ЭТО НАДО БРАТЬ ИЗ КОНСТАНТ 
	ПарольФайлаСертификата = "root";                                    
	ПутьКФайлуСертификата = "C:\ТСЖ\sberbusiness_prod.p12"; // ЭТО НА СЕРВЕРЕ
	// ЭТО НУЖНО ПОЛУЧАТЬ
	AccessToken = "b3651c4e-1532-448b-a300-8df705034b1e-2";    
	ПапкаДляСохранения = "C:\ТСЖ\Загрузки";
	
КонецПроцедуры
