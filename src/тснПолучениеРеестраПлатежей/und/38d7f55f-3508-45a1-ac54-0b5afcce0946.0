{4,
{49,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ПолучитьРеестр",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПолучитьРеестрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{12,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0,
{49,0}
},"								   
&НаСервере
Функция СгенерироватьURLСПараметрами(ПараметрыЗапроса)

	СтрокаПараметров = """";
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		 СтрокаПараметров = СтрокаПараметров + ?(ПустаяСтрока(СтрокаПараметров), ""?"", ""&"") + 
		 	ПараметрЗапроса.Ключ + ""="" + КодироватьСтроку(ПараметрЗапроса.Значение, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;  
		
	Возврат СтрокаПараметров;
	
КонецФункции

&НаСервере 
Функция FinapiGET(URL, ПараметрыЗапроса = Неопределено)

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);
	
	Соединение = Новый HTTPСоединение(""fintech.sberbank.ru"",9443,,,,, ЗащищенноеСоединение);
	
	СтрокаПараметров = ?(ПараметрыЗапроса = Неопределено, """", СгенерироватьURLСПараметрами(ПараметрыЗапроса));
		
	Запрос = Новый HTTPЗапрос(""fintech/api/v1/"" + URL + СтрокаПараметров);
	Запрос.Заголовки.Вставить(""Authorization"", ""Bearer "" + AccessToken);
	
	Ответ = Соединение.Получить(Запрос); 
	Если Ответ.КодСостояния <> 200 Тогда        
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ОтветСтрока);
	ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ОтветJSON;
	
КонецФункции    


&НаСервере 
Функция FinapiPOST(URL, СтруктураЗапроса)

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);
	
	Соединение = Новый HTTPСоединение(""fintech.sberbank.ru"",9443,,,,, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос(""fintech/api/v1/"" + URL);
	Запрос.Заголовки.Вставить(""Authorization"", ""Bearer "" + AccessToken); 
	Запрос.Заголовки.Вставить(""Content-type"", ""application/json"");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	
	Запрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда        
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();

	Если ОтветСтрока = """" Тогда
		Возврат """";
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ОтветСтрока);
		ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	Возврат ОтветJSON;
	
КонецФункции    

&НаСервере
Функция FinapiDownload(URL, ИмяВыходногоФайла)
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаФайл(ПутьКФайлуСертификата, ПарольФайлаСертификата)
	);                           
	
	URL = Сред(URL, СтрНайти(URL, ""://"") + 3); // Убираем название протокола;
	ПозицияРазделителя = СтрНайти(URL, ""/"");
	
	СтрокаСервера = Лев(URL, ПозицияРазделителя - 1);
	ПозицияРазделителяПорта = СтрНайти(СтрокаСервера, "":"");
	Если ПозицияРазделителяПорта = 0 Тогда
		АдресСервера = СтрокаСервера;
		Порт = 443;
	Иначе
		АдресСервера = Лев(СтрокаСервера, ПозицияРазделителяПорта - 1);
		Порт = Число(Сред(СтрокаСервера, ПозицияРазделителяПорта + 1));
	КонецЕсли;
	URL = Сред(URL, ПозицияРазделителя + 1);
	
	Соединение = Новый HTTPСоединение(АдресСервера,Порт,,,,, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос(URL);
	Запрос.Заголовки.Вставить(""Authorization"", ""Bearer "" + AccessToken);
	
	Ответ = Соединение.Получить(Запрос, ИмяВыходногоФайла);
	
	Возврат Ответ.КодСостояния = 200;
	
КонецФункции        

&НаСервере 
Процедура Пауза(Секунд) 
    
    ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
    ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
    
    Если ФоновоеЗадание = Неопределено Тогда
        ПараметрыЗадания = Новый Массив;
        ПараметрыЗадания.Добавить(Секунд);
        ФоновоеЗадание = ФоновыеЗадания.Выполнить(""ОбщегоНазначенияБТС.Пауза"", ПараметрыЗадания);
    КонецЕсли;
        
    ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
    
КонецПроцедуры

&НаСервере 
Функция СкачатьФайлыРеестра(МассивФайлов)
	
	Результат = Новый Массив();
	          
	Для Каждого ЗаписьФайла Из МассивФайлов Цикл
		
		ПараметрыЗапроса = Новый Структура(""fileIds"", Новый Массив());
		ПараметрыЗапроса.fileIds.Добавить(ЗаписьФайла.fileId);
		
		РезультатЗапроса = FinapiPOST(""files/download"", ПараметрыЗапроса);
		Если РезультатЗапроса <> Неопределено Тогда
			
			Счетчик = 0;
			Пока Счетчик < 100 Цикл
				
				Счетчик = Счетчик + 1;
				
				РезультатЗапроса = FinapiPOST(""files/downloadState"", ПараметрыЗапроса);
				Если РезультатЗапроса = Неопределено Тогда
					// TODO Зафиксировать ошибку - указанный файл не был найден
					Прервать;
				КонецЕсли;                                                       
				
				Файл = РезультатЗапроса[0];
				
				Если Файл.status = ""PREPARING_FOR_DOWNLOAD"" ИЛИ Файл.status = ""UNKNOWN_STATUS"" Тогда
					Пауза(1);	
					Продолжить;
				ИначеЕсли Файл.status = ""READY_FOR_DOWNLOAD"" Тогда
					
					Если FinapiDownload(Файл.url, ПапкаДляСохранения + ""\"" + ЗаписьФайла.fileName) Тогда
						Результат.Добавить(ПапкаДляСохранения + ""\"" + ЗаписьФайла.fileName);
						Прервать
					Иначе
						// TODO Зафиксировать ошибку - указанный файл не был скачан
						Прервать;
					КонецЕсли;
				Иначе
					// TODO Зафиксировать ошибку - указанный файл не был найден
					Прервать;
				КонецЕсли;
				
			КонецЦикла;         
			
		КонецЕсли;

	КонецЦикла;                          
	
	Возврат Результат;
	
КонецФункции

&НаСервере 
Функция ПолучитьРеестрПлатежей(НачалоПериода, КонецПериода)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить(""dateSince"", Формат(НачалоПериода, ""ДФ=yyyy-MM-dd""));
	ПараметрыЗапроса.Вставить(""dateUntil"", Формат(КонецПериода, ""ДФ=yyyy-MM-dd""));
	
	СтрокаПараметров = СгенерироватьURLСПараметрами(ПараметрыЗапроса);
	Результат = Новый Массив();
	
	Счетчик = 0; // На всякий случай если вдруг зациклится что-то
	
	Пока Счетчик < 50 И НЕ ПустаяСтрока(СтрокаПараметров) Цикл 
		
		РеестрыПлатежей = FinapiGET(""payments-registry"" + СтрокаПараметров);
	
		
		Для Каждого РеестрПлатежей Из РеестрыПлатежей.paymentsRegistry Цикл
			
			НоваяЗапись = Новый Структура(""Дата,Номер,БанковскийСчет,Статус,ИменаФайлов"");
			НоваяЗапись.Дата = Дата(СтрЗаменить(РеестрПлатежей.date, ""-"", """"));
			НоваяЗапись.Номер = РеестрПлатежей.number;
			НоваяЗапись.БанковскийСчет = РеестрПлатежей.account;
			НоваяЗапись.Статус = РеестрПлатежей.bankStatus;

			НоваяЗапись.ИменаФайлов = СкачатьФайлыРеестра(РеестрПлатежей.bfAttachments);
			
			Результат.Добавить(НоваяЗапись);
			
		КонецЦикла;
		
		СтрокаПараметров = """";
		Для Каждого СсылкаНаДополнительнуюСтраницу Из РеестрыПлатежей._links Цикл
			Если СсылкаНаДополнительнуюСтраницу.rel = ""next"" Тогда
				СтрокаПараметров = СсылкаНаДополнительнуюСтраницу.href;
				Прервать;
			КонецЕсли;
		КонецЦикла;           
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРеестр(Команда)
	
	Результат = ПолучитьРеестрПлатежей('20220901', '20220901');
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// ЭТО НАДО БРАТЬ ИЗ КОНСТАНТ 
	ПарольФайлаСертификата = ""root"";                                    
	ПутьКФайлуСертификата = ""C:\ТСЖ\sberbusiness_prod.p12""; // ЭТО НА СЕРВЕРЕ
	// ЭТО НУЖНО ПОЛУЧАТЬ
	AccessToken = ""b3651c4e-1532-448b-a300-8df705034b1e-2"";    
	ПапкаДляСохранения = ""C:\ТСЖ\Загрузки"";
	
КонецПроцедуры
",
{4,5,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",5c183dfc-2b9f-4695-ac12-a3ff9f27e673}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ПарольФайлаСертификата",
{1,1,
{"ru","Пароль файла сертификата"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ПутьКФайлуСертификата",
{1,1,
{"ru","Путь к файлу сертификата"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"AccessToken",
{1,1,
{"ru","Access token"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПапкаДляСохранения",
{1,1,
{"ru","Папка для сохранения"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,1,
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПолучитьРеестр",
{1,1,
{"ru","Получить реестр"}
},
{1,1,
{"ru","Получить реестр"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПолучитьРеестр",3,0,0,
{0,0},1,0,1,0,0,2}
},
{0,0},
{0,0},0,0}